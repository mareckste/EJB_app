package facade;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.annotation.Resource;
import javax.ejb.EJBContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.Predicate.BooleanOperator;
import javax.transaction.UserTransaction;

import dao.UserDAO;
import entity.Flight;
import entity.User;
import remote.MyTransactionFacadeBeanRemote;


@Stateless
@TransactionManagement(TransactionManagementType.BEAN)
public class MyTransactionFacadeBean implements MyTransactionFacadeBeanRemote {

	@PersistenceContext
	private EntityManager em;

	@Resource
	private EJBContext context;

	private static final String connectionClass = "org.postgresql.Driver";
	private static final String connectionDriverUrl = "jdbc:postgresql://localhost:5432/vava";
	private static final String connectionLogin = "postgres";
	private static final String connectionPW = "Pg123456";

	
	/*
	 * Metoda prida noveho pouzivatela do DB.
	 */
	public boolean addUser(User u) {
		UserDAO ud = new UserDAO();
		if (ud.isAvailableLogin(em, u.getLogin_name()) == false) return false;
		
		
		UserTransaction ut = context.getUserTransaction();
		
		try {
			ut.begin();
			
				em.persist(u);
			
			ut.commit();
			return true;
		} catch(Exception e) {
			e.printStackTrace();
			try {
				ut.rollback();
			} catch(Exception ex) {
				e.printStackTrace();
			}
		}
	}
	
	
	
	/*
	 * Metoda pridava let pouzivatelovi.
	 * Ak este let nieje evidovany, vlozi sa skrz 
	 * transakciu do DB a potom sa na zaklade jeho ID
	 * zaeviduje zaznam do vazobnej tabulky.
	 *
	 */
	public void addFlight(int userID, Flight f, String message) {
		Connection con = null;
		PreparedStatement p2 = null, p1 = null, select = null;

		try {
			Class.forName(connectionClass);
			con = DriverManager.getConnection(connectionDriverUrl, connectionLogin, connectionPW);
			con.setAutoCommit(false);
			Integer id = null;
			
			if (f.getId() == null) {
				p1 = con.prepareStatement(
						"insert into let(flight_from, flight_to, flight_number, flight_date) " + "values(?,?,?,?)");
				p1.setString(1, f.getAirportFrom());
				p1.setString(2, f.getAirportTo());
				p1.setString(3, f.getFlightNumber());
				p1.setString(4, f.getDate());

				// nedal som sem int, uvidime
				p1.executeUpdate();

				select = con.prepareStatement("select currval('let_f_id_seq')");
				ResultSet rs = select.executeQuery();

				if (rs.next())
					id = Integer.valueOf(rs.getString("currval"));

			} else {
				id = f.getId();
			}

			p2 = con.prepareStatement("insert into pouzivatel_let(userko_u_id, flight_f_id, message) values(?, ?, ?)");

			p2.setInt(1, userID);
			p2.setInt(2, id);
			p2.setString(3, message);
			p2.executeUpdate();

			con.commit();

		} catch (Exception e) {

			if (con != null) {
				try {
					System.err.println("Transaction is being rolled back");
					con.rollback();
				} catch (SQLException excep) {

				}
			}
		}

		try {
			p2.close();
			p1.close();
			select.close();
			con.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

}
